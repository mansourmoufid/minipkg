.if exists(${LOCALBASE}/bin/curl)
FETCH_USING=		curl
TOOLS_PATH.curl=	${LOCALBASE}/bin/curl
.endif

.if exists(${LOCALBASE}/bin/clang)
CLANGBASE=		${LOCALBASE}
.endif

CPPFLAGS+=		-D__STDC_WANT_LIB_EXT1__=1
CPPFLAGS+=		-D_FORTIFY_SOURCE=1
CPPFLAGS+=		-isystem ${LOCALBASE}/include
CFLAGS+=		-fpic
CFLAGS+=		-Os
CFLAGS+=		-fno-strict-aliasing
CFLAGS+=		-fno-strict-overflow
CFLAGS+=		-fno-common
CFLAGS+=		-fno-builtin
CFLAGS+=		-fwrapv
CXXFLAGS=		${CFLAGS}
LDFLAGS+=		-pie
LDFLAGS+=		-Wl,-L${LOCALBASE}/lib
LDFLAGS+=		-Wl,-S
LDFLAGS.Linux+=		-Wl,-z,relro
LDFLAGS.Linux+=		-Wl,-z,noexecstack
LDFLAGS.Linux+=		-Wl,-z,muldefs
LDFLAGS.Darwin+=	-Wl,-rpath,${LOCALBASE}
LDFLAGS.Darwin+=	-Wl,-search_paths_first
LDFLAGS.Darwin+=	-Wl,-segprot,__TEXT,rx,rx
LDFLAGS.Darwin+=	-Wl,-segprot,__DATA,rw,rw
LDFLAGS.Darwin+=	-Wl,-segprot,__LINKEDIT,r,r
LDFLAGS.Darwin+=	-Wl,-segprot,__RODATA,r,r
LDFLAGS.Darwin+=	-Wl,-rename_section,__TEXT,__const,__RODATA,__const
LDFLAGS.Darwin+=	-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring
LDFLAGS.Darwin+=	-Wl,-mark_dead_strippable_dylib
LDFLAGS.Darwin+=	-Wl,-dead_strip_dylibs
.if exists(${LOCALBASE}/bin/clang++)
CPPFLAGS+=		-cxx-isystem ${LOCALBASE}/include/c++/v1
CXXFLAGS+=		-std=c++11 -stdlib=libc++ -nostdinc++
LDFLAGS+=		-lc++ -lc++abi
.endif

SPATCHES=		${PKGSRCDIR}/spatches
LOCALPATCHES=		${PKGSRCDIR}/localpatches

USE_CWRAPPERS=		no
CHECK_FILES=		no
MAKE_JOBS=		4

.PHONY: fix-perm
fix-perm:
	(find ${WRKSRC} -type f | fix-perm.py) || true

post-extract: fix-perm

.PHONY: fix-rpaths
fix-rpaths:
	(find ${WRKDIR}/.destdir | fix-rpath.py ${LOCALBASE}) || true

.PHONY: fix-shebangs
fix-shebangs:
	(find ${WRKDIR}/.destdir | fix-shebang.py) || true

post-install: fix-rpaths fix-shebangs

.PHONY: spatch
spatch:
	(spatch.py ${LOCALPATCHES}/${PKGPATH}/* ${SPATCHES}/* ${WRKSRC}) || true

.if !(defined(SPATCH) && ${SPATCH} == "no")
post-patch: spatch
.endif

CURSES_DEFAULT=			curses
READLINE_DEFAULT=		readline

PKG_DEFAULT_OPTIONS=	-debug -nls
